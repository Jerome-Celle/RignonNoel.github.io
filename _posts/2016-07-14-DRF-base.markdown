---
layout: post
title:  "[DRF] Make an API with Django Rest Framework"
date:   2016-07-14 14:20:00:00 +0400
categories: [Django, Api]
---

I love use API in my web projects for lot of reason:

* Make an API help me to make a better conception (more modular)
* An API allow other software to use my project (long drop)
* If your software come in replacement of an older, it's more simple to transfer existent data
* When i work with API i have a better separation between CRUD and functionality

---

### Why i use Django Rest Framework ###

---

I work LOT OF with Django because i love python and i 
love the default admin panel to manage my models, so i needed a 
way to make easy the creation of API on Django. Django Rest 
Framework (DRF) help me on lot of points :

* API is easy to test (exactly as a Django generic view)
* Implementation of API look like implementation of Django generic view
  * Less training time
  * Easier to teach my students the tools
* I can autogenerate a very good documentation

So today, we will speak about Django Rest Framework!

---

## How to install ##

---

Django Rest Framework is very easy to install and integrate with an 
existant Django project we just need to install the package with pip 
and add them in `INSTALLED_APP` of project's settings.

{% highlight bash %}
sudo pip install djangorestframework
{% endhighlight %}

{% highlight python %}
INSTALLED_APPS = (
    ...
    'rest_framework',
)
{% endhighlight %}

> **Note**: Don't forget to add the new requirements to your projects 
> requirements if you need have a file for that!

---

## How to use ##

---

> **Note**: I'm not here to repeat the same things as the documentation 
> so if you want more than the basic introduction of this part i invite you to go on [the official documentation](http://www.django-rest-framework.org/).

Django Rest Framework work with a basic architecture:

### Serializers ###

Serializer are use to transform your data (ex: models) with a structured language format (ex: JSON, XML). 

**Example with JSON**
{% highlight json %}
{
    "first_name": "NoÃ«l",
    "last_name": "Rignon",
    "email": "rignon.noel@openmailbox.org",
    "password": "test123!"
}
{% endhighlight %}

In the serializer you can define:

 - Data accessible with API
 - Read-only data (id, username, ..)
 - New field auto-generate (model method, count, ..)
 
You can also directly serialize model as here :

**Example of model serializer**
{% highlight bash %}
from django.contrib.auth.models import User
from rest_framework import serializers


class UserSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ('url', 'username', 'email', 'groups')
{% endhighlight %}

### Views ###

`views` are use as an access point (exactly as in Django). With `views` 
we make the logic of each action of the HTTP request :

 - GET : use to list objects or get the detail of an object
 - POST : use to create a new object
 - PUT : use to modify an object
 - PATCH : use to modify just on field of an object
 - DELETE : use to delete an object
 
**Example of views**
{% highlight bash %}
class UserRetrieve(generics.RetrieveAPIView):
    def get(self, request, *args, **kwargs):
        user = get_object_or_404(
            User,
            pk=kwargs['pk']
        )

        return Response(UserSerializer(user).data)
{% endhighlight %}

### Urls ###

Nothing to say on that side, it's just basic Django url

{% highlight bash %}
url(
    r'^users/$',
    views.UserViewSet.as_view(),
    name='users_list'
),
{% endhighlight %}


---

## Generic views ##

---

Django rest framework have a list of generic view, i invite you to use these generic view as much as possible!

Here is the list of generic view i use :

 - `ListAPIView` : To list objects
 - `CreateAPIView` : To create new object
 - `ListCreateAPIView` : To list and create new objects
 - `RetrieveAPIView` : To get a given object
 - `UpdateAPIView` : To modify a given object
 - `DestroyAPIView` : To destroy a given object
 - `RetrieveUpdateDestroyAPIView` : To get, modify and destroy a given object
 
If you use these generic `view` you can overwrite these `def` :

 - `get`
 - `post`
 - `put`
 - `patch`
 - `delete`
 
---

## Good practice ##

---

### URLS ###

 1. Always set the name of your objects in plural
 2. Use the same url for create and list
 3. Use the same url for retrieve, update and destroy
 4. Get the id in url for retrieve, update and destroy
 
**Good examples**

 - Create new members : POST on `api/members`
 - List members : GET on `api/members`
 - Get detail of a user : GET on `api/members/1`
 - Modify a user : PUT or PATCH on `api/members/1`
 - Delete a user : DELETE on `api/members/1`
 
### HTTP Code ###

I invite you to ALWAYS use the good HTTP code of return. If you don't 
return the good code we can't user correctly your API...  

**Good examples**

 - `201` after a creation
 - `200` after a list or a get
 - `404` if the object id doesn't exist
 - `400` if an argument of the request is invalid
 
### Data of return ###

Where you have an error or when you get an invalid argument it's really 
important to create a good message in your data return.

You can, for example, write the name of the argument who is invalid.